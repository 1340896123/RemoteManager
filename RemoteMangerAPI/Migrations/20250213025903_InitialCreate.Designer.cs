// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RemoteMangerAPI;

#nullable disable

namespace RemoteMangerAPI.Migrations
{
    [DbContext(typeof(RemoteMangerDBContext))]
    [Migration("20250213025903_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RemoteMangerAPI.Entitys.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Classification")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedById")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PermissionId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = "857B292E1609477B8C9D151300080A09",
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Default",
                            PermissionId = "857B292E1609477B8C9D151300080A09"
                        });
                });

            modelBuilder.Entity("RemoteMangerAPI.Entitys.PermissionsRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanRead")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanWrite")
                        .HasColumnType("boolean");

                    b.Property<string>("Classification")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedById")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PermissionId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("PermissionsId")
                        .HasColumnType("character varying(32)");

                    b.Property<string>("RoleId")
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("PermissionsId");

                    b.HasIndex("RoleId");

                    b.ToTable("PermissionsRoles");
                });

            modelBuilder.Entity("RemoteMangerAPI.Entitys.RDPAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Account")
                        .HasColumnType("text");

                    b.Property<string>("Classification")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Host")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedById")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PermissionId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Pwd")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RDPAccounts");
                });

            modelBuilder.Entity("RemoteMangerAPI.Entitys.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Classification")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedById")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PermissionId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "b3ebc9a593a148d382bc7d5315de5821",
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Creater",
                            PermissionId = "857B292E1609477B8C9D151300080A09"
                        });
                });

            modelBuilder.Entity("RemoteMangerAPI.Entitys.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Classification")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedById")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PermissionId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "a7643edb2960420d9e730e3812bf4da3",
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "11",
                            PermissionId = "857B292E1609477B8C9D151300080A09",
                            Username = "11"
                        });
                });

            modelBuilder.Entity("RemoteMangerAPI.Entitys.UserRadAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Classification")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedById")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PermissionId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("UserId")
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRadAccount");
                });

            modelBuilder.Entity("RemoteMangerAPI.Entitys.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Classification")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedById")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PermissionId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("RoleId")
                        .HasColumnType("character varying(32)");

                    b.Property<string>("UserId")
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("RemoteMangerAPI.Entitys.PermissionsRole", b =>
                {
                    b.HasOne("RemoteMangerAPI.Entitys.Permission", "Permission")
                        .WithMany("PermissionsRoles")
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RemoteMangerAPI.Entitys.Role", "Role")
                        .WithMany("PermissionsRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RemoteMangerAPI.Entitys.RDPAccount", b =>
                {
                    b.HasOne("RemoteMangerAPI.Entitys.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RemoteMangerAPI.Entitys.UserRadAccount", b =>
                {
                    b.HasOne("RemoteMangerAPI.Entitys.User", null)
                        .WithMany("UserRadAccounts")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RemoteMangerAPI.Entitys.UserRole", b =>
                {
                    b.HasOne("RemoteMangerAPI.Entitys.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RemoteMangerAPI.Entitys.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RemoteMangerAPI.Entitys.Permission", b =>
                {
                    b.Navigation("PermissionsRoles");
                });

            modelBuilder.Entity("RemoteMangerAPI.Entitys.Role", b =>
                {
                    b.Navigation("PermissionsRoles");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("RemoteMangerAPI.Entitys.User", b =>
                {
                    b.Navigation("UserRadAccounts");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
